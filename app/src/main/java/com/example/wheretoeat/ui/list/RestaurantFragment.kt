package com.example.wheretoeat.ui.list

import android.os.Bundle
import android.view.Menu
import android.view.MenuInflater
import android.view.View
import androidx.appcompat.widget.SearchView
import androidx.core.view.isVisible
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.findNavController
import androidx.paging.LoadState
import com.example.wheretoeat.R
import com.example.wheretoeat.data.model.Restaurant
import com.example.wheretoeat.databinding.FragmentRestaurantListBinding
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.android.synthetic.main.fragment_restaurant_list.*

@AndroidEntryPoint
class RestaurantFragment : Fragment(R.layout.fragment_restaurant_list),RestaurantAdapter.OnItemClickListener{
    private val viewModel by viewModels<ListViewModel> ()

    private var _binding: FragmentRestaurantListBinding?= null
    private val binding get() = _binding!!

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        _binding=FragmentRestaurantListBinding.bind(view)

        val adapter = RestaurantAdapter(this)

        binding.apply {
            recyclerViewRestaurants.setHasFixedSize(true)
            recyclerViewRestaurants.adapter=adapter.withLoadStateHeaderAndFooter(
                header = LoadStateFooterAdapter{
                    adapter.retry()
                },
                footer = LoadStateFooterAdapter{
                    adapter.retry()
                }
            )
            buttonRetry.setOnClickListener{
                adapter.retry()
            }
        }

        //important to pass viewLifecycleOwner instead this fragment because
        //you want to stop updating the ui when the view of the fragment is destroyed
        viewModel.restaurants.observe(viewLifecycleOwner){
            //lifecycle of the view not the fragment's lifecycle,
            //if we call the fragment lifecycle bc. the paging library will call our binding while
            //the view of the fragment is destroyed
            adapter.submitData(viewLifecycleOwner.lifecycle,it)
        }

        adapter.addLoadStateListener { loadStates ->
            binding.apply {
                progress_on_scrollbar.isVisible=loadStates.source.refresh is LoadState.Loading
                recycler_view_restaurants.isVisible=loadStates.source.refresh is LoadState.NotLoading
                buttonRetry.isVisible=loadStates.source.refresh is LoadState.Error
                textViewError.isVisible=loadStates.source.refresh is LoadState.Error

                //empty view
                if (loadStates.source.refresh is LoadState.NotLoading &&
                    loadStates.append.endOfPaginationReached &&
                    adapter.itemCount <1) {
                    recycler_view_restaurants.isVisible = false
                    textViewEmpty.isVisible = true
                }else{
                    textViewEmpty.isVisible=false
                }
            }
        }

        setHasOptionsMenu(true)
    }

    override fun onItemClick(restaurant: Restaurant) {
        //autogenerated by safeargs plugin
        val action = RestaurantFragmentDirections.actionRestaurantFragmentToDetailsFragment(restaurant)
        findNavController().navigate(action)
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        super.onCreateOptionsMenu(menu, inflater)

        inflater.inflate(R.menu.menu_list,menu)

        val searchCity=menu.findItem(R.id.action_search)
        val searchView=searchCity.actionView as SearchView

        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(city: String?): Boolean {

                if (city != null) {
                    binding.recyclerViewRestaurants.scrollToPosition(0)
                    viewModel.getRestaurants(city)
                    searchView.clearFocus()
                }
                return true
            }

            override fun onQueryTextChange(newText: String?): Boolean {
                return true
            }
        })
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding=null
    }
}